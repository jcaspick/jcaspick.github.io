<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Jake Caspick</title>
    <link>https://www.jakecaspick.com/project/</link>
    <description>Recent content in Projects on Jake Caspick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Mar 2020 18:44:20 -0400</lastBuildDate>
    
	<atom:link href="https://www.jakecaspick.com/project/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vaporous</title>
      <link>https://www.jakecaspick.com/project/vaporous/</link>
      <pubDate>Fri, 06 Mar 2020 18:44:20 -0400</pubDate>
      
      <guid>https://www.jakecaspick.com/project/vaporous/</guid>
      <description>The Demo Here&#39;s a screen recording of the demo in action. Other than the hovercar which I modeled and textured by hand, everything you see is procedurally generated.
  And here is footage of a few different tracks being generated from an aerial view so you can get a better idea of what the world looks like.
  Backstory I first started learning Unity sometime in 2015. After making a few rudimentary games by following tutorials, the first real project I started was a racing game called Ruedehue with procedurally generated tracks.</description>
    </item>
    
    <item>
      <title>Sugarcube</title>
      <link>https://www.jakecaspick.com/project/sugarcube/</link>
      <pubDate>Wed, 07 Aug 2019 19:07:19 -0300</pubDate>
      
      <guid>https://www.jakecaspick.com/project/sugarcube/</guid>
      <description>Sugarcube is a generative art program that creates intricate voxel structures using 3D cellular automata. The program is written in C++ and uses GLFW for creating the window and OpenGL context. The GUI is built using ImGui, an excellent open source project that I can&#39;t say enough nice things about. This is the first non-trivial program I wrote while learning OpenGL.
You can find the the source code on github, feel free to modify and expand on it if you are so interested.</description>
    </item>
    
  </channel>
</rss>